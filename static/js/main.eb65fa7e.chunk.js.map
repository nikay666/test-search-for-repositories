{"version":3,"sources":["token.ts","ApolloClient.ts","theme.ts","Components/FullWidthCard/styles.ts","Components/FullWidthCard/FullWidthCardSkeleton.tsx","Components/ErrorMessage/ErrorMessage.tsx","Components/FullWidthCard/FullWidthCard.tsx","Components/CardTitle/styles.ts","Components/CardTitle/CardTitle.tsx","Components/InformationBlock/styles.ts","utils/formatting.ts","Components/InformationBlock/InformationBlock.tsx","Components/LanguagesBlock/styles.ts","Components/LanguagesBlock/LanguagesBlock.tsx","utils/getPercent.ts","Components/RepositoryCard/styles.ts","Components/InformationPanel/styles.ts","Components/InformationPanel/InformationPanel.tsx","Components/RepositoryCard/RepositoryCard.tsx","apolloRequests.ts","Pages/RepositoriesPage.tsx","Components/SearchInput/SearchInput.tsx","Components/SearchCard/styles.ts","Components/SearchCard/SearchCard.tsx","Components/SearchList/styles.ts","Components/SearchList/SearchList.tsx","Components/ListSkeleton/ListSkeleton.tsx","Pages/styles.ts","Pages/SearchPage.tsx","Components/MainContainer/styles.ts","Components/MainContainer/MainContainer.tsx","App.tsx","index.tsx"],"names":["TOKEN","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","Query","fields","search","relayStylePagination","theme","createTheme","palette","type","primary","main","blue","secondary","pink","success","green","error","red","background","default","useStyles","makeStyles","createStyles","information","marginRight","spacing","card","width","descripition","margin","FullWidthCardSkeleton","Skeleton","variant","sx","bgcolor","borderRadius","minHeight","ErrorMessage","Alert","severity","AlertTitle","FullWidthCard","loading","children","classes","message","Card","className","root","color","display","CardTitle","to","fontSize","typography","subtitle2","chip","marginLeft","icon","percent","text","formatNumberByStringThousand","num","toPrecision","getFormattedStringOfTitle","title","InformationBlock","count","Icon","Typography","noWrap","component","undefined","Chip","label","size","flexDirection","padding","list","listItem","LanguagesBlock","languages","List","edges","map","language","ListItem","htmlColor","node","name","total","totalSize","number","Math","floor","id","justifyContent","mainInfo","breakpoints","down","marginBottom","languageBlock","InformationPanel","stargazers","primaryLanguage","issues","pullRequests","totalCount","RepositoryCard","props","CardContent","nameWithOwner","description","SEARCH_REPOSITORIES","gql","GET_REPOSITORY","RepositoriesPage","match","useQuery","variables","repositoryID","params","data","IconButton","SearchInput","setValue","useState","state","setState","TextField","fullWidth","value","InputProps","endAdornment","InputAdornment","position","onChange","e","currentTarget","SearchCard","paddingLeft","paddingRight","SearchList","uuidv4","ListSkeleton","length","array","Array","fill","i","height","random","input","marginTop","SearchPage","useLazyQuery","getRepositories","fetchMore","repositoryName","pageInfo","hasNextPage","Button","onClick","endCursor","cursor","backgroundColor","paddingTop","paddingBottom","MainContainer","Container","maxWidth","App","ThemeProvider","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb65fa7e.chunk.js","sourcesContent":["export const TOKEN = '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'","import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { TOKEN } from \"./token\";\nimport { setContext } from  \"@apollo/client/link/context\";\nimport { relayStylePagination } from \"@apollo/client/utilities\";\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: TOKEN ? `Bearer ${TOKEN}` : \"\",\n    }\n  }\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          search: relayStylePagination(['query'])\n        }\n      }\n    }\n  })\n});\n\n","import { blue, green, pink, red } from '@material-ui/core/colors';\nimport {  createTheme } from '@material-ui/core/styles';\n\nexport const theme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: blue[200]\n    },\n    secondary: {\n      main: pink[200]\n    },\n    success: {\n      main: green[300]\n    },\n    error: {\n      main: red[300]\n    },\n    background: {\n      default: '#212121'\n    }\n  },\n});\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\n\nexport const useStyles = makeStyles((theme: Theme) => \ncreateStyles({\n  information: {\n    marginRight: theme.spacing(2)\n  },\n  card: {\n    width: '100%',\n    background: theme.palette.background.default\n  },\n  descripition: {\n    margin: '5px 0'\n  }\n})\n);\n","import { Skeleton } from '@mui/material';\nimport React from 'react';\n\nconst FullWidthCardSkeleton = () => {\n  return (\n    <Skeleton variant='rectangular' sx={{ bgcolor: 'grey.800', borderRadius: 4, minHeight: 190 }} />\n  )\n}\n\nexport default FullWidthCardSkeleton;\n","import React from 'react'\nimport { Alert, AlertTitle } from '@mui/material';\n\n\ninterface IErrorMessageProps{\n  error: string\n}\nconst ErrorMessage = ({error}: IErrorMessageProps) => {\n  return (\n    <Alert severity='error'>\n      <AlertTitle>Упс! Что-то пошло не так </AlertTitle>\n    {`${error}`}</Alert>  \n  )\n}\n\nexport default ErrorMessage\n","import React from 'react'\nimport { Card } from '@material-ui/core';\nimport { useStyles } from './styles';\nimport { ApolloError } from '@apollo/client';\nimport FullWidthCardSkeleton from './FullWidthCardSkeleton';\nimport { ErrorMessage } from '../ErrorMessage';\ninterface IFullWidthCardProps {\n  error?: ApolloError | undefined\n  loading?: boolean\n  children?: React.ReactNode\n};\n\nconst FullWidthCard = ({loading, error, children}: IFullWidthCardProps) => {\n  const classes = useStyles()\n\n  if(loading) return <FullWidthCardSkeleton/>\n  if(error) return <ErrorMessage error={error.message} />\n\n  return (\n    <Card  variant='outlined' className={classes.card} >\n      {children}\n    </Card>\n  )\n};\n\nexport default FullWidthCard;\n","import { createStyles, makeStyles, Theme } from  '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    root: {\n      color: theme.palette.primary.main,\n      display: 'inline-block'\n    }\n  })\n); ","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { useStyles } from './styles';\nimport './style.css';\n\n\ninterface ICardTitleProps {\n  children: string,\n  to: string\n}\n\nconst CardTitle = ({to, children}: ICardTitleProps) => {\n  const classes = useStyles()\n\n  return (\n       <Link className={`${classes.root} card__title`} to={to} >{children}</Link>\n  )\n}\n\nexport default CardTitle\n","import { createStyles,  makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    information: {\n      fontSize: theme.typography.subtitle2.fontSize,\n    },\n    chip: {\n      marginLeft: theme.spacing(0.5)\n    },\n    icon: {\n      marginRight: theme.spacing(0.5) \n    },\n    percent: {\n      color: theme.palette.text.secondary,\n      marginLeft: theme.spacing(0.5)\n    }\n  })\n);","export const formatNumberByStringThousand = (num: number): string  => {\n  return num >= 1000 ? `${(num / 1000).toPrecision(2)}k` : `${num}`\n}\n\nexport const getFormattedStringOfTitle = (title: number | string): string  => {\n  return typeof title === 'number' ? formatNumberByStringThousand(title): title;\n};\n","import React from 'react'\nimport { Chip, Icon, Typography } from '@material-ui/core';\nimport { useStyles } from './styles';\nimport { formatNumberByStringThousand, getFormattedStringOfTitle } from '../../utils/formatting';\ninterface IInformationBlockProps {\n  icon: React.ReactElement,\n  title: string | number,\n  count?: number,\n  className?: string\n  percent?: number\n};\n\nconst InformationBlock = ({icon, count, title, percent, className = ''}: IInformationBlockProps) => {\n  const classes = useStyles();\n\n  if(percent === 0) return null;\n\n  return (\n    <div className={`${classes.information} ${className} flex-center`} >\n      <Icon fontSize='inherit' className={classes.icon} >{icon}</Icon>\n      <Typography variant='inherit' noWrap component='p'>{ getFormattedStringOfTitle(title) }</Typography>\n      { count !== undefined \n        && <Chip className={classes.chip} label={formatNumberByStringThousand(count)} size='small' /> \n      }\n      { percent !== undefined \n        && <Typography variant='inherit' className={classes.percent} component='p' >{`${percent}%`}</Typography>  \n      }\n    </div>\n  );\n};\n\nexport default InformationBlock;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n\n    },\n    information: {\n      marginRight: theme.spacing(2),\n      margin: '5px 0',\n      padding: 0,\n    },\n    list: {\n\n    },\n    listItem: {\n      padding: 0,\n    }\n  })\n);\n","import React from 'react'\nimport { List, ListItem, Typography } from '@material-ui/core'\nimport { InformationBlock } from '../InformationBlock'\nimport CircleIcon from '@mui/icons-material/Circle';\nimport { useStyles } from './styles';\nimport { ILanguages } from '../../Interfaces/language';\nimport { getPercent } from '../../utils/getPercent';\n\ninterface ILanguagesBlockProps {\n  className: string,\n  languages: ILanguages\n}\n\nconst LanguagesBlock = ({languages, className}: ILanguagesBlockProps) => {\n  const classes = useStyles();\n\n  return (\n    <div className={className} >\n      <Typography variant='h6' component='p'>Languages</Typography>\n      \n      <List>\n        {\n          languages.edges.map(language => (\n            <ListItem key={language.node.id} className={classes.listItem} >\n            <InformationBlock\n                className={classes.information}\n                icon={<CircleIcon fontSize='inherit' htmlColor={language.node.color} />}\n                title={language.node.name}\n                percent={getPercent(languages.totalSize, language.size,)}\n            />\n            </ListItem>\n          ))\n        }\n      </List>\n    </div>\n  )\n}\n\nexport default LanguagesBlock\n","export const getPercent = (total: number, number: number): number => {\n  return Math.floor((number / total) * 100)\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    root: {\n      justifyContent: 'space-between',\n    },\n    descripition: {\n      margin: '5px 0'\n    },\n    mainInfo: {\n      width: '60%',\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.down('sm')]: {\n        width: '75%',\n        marginRight: 0,\n        marginBottom: theme.spacing(2)\n      },\n      [theme.breakpoints.down('xs')]: {\n        width: '100%',\n        marginRight: 0,\n        marginBottom: theme.spacing(2)\n      }\n    },\n    languageBlock: {\n      [theme.breakpoints.down('xs')]: {\n        width: '100%',\n      }\n    }\n  })\n);\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    information: {\n      marginRight: theme.spacing(2),\n      margin: '5px 0'\n    },\n  })\n);\n","import React from 'react'\nimport { InformationBlock } from '../InformationBlock';\nimport CallMergeIcon from '@mui/icons-material/CallMerge';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport CircleIcon from '@mui/icons-material/Circle';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport { useStyles } from './styles';\nimport { ITotalCount } from '../../Interfaces/totalCount';\nimport { ILanguage } from '../../Interfaces/language';\n\ninterface IInformationPanelProps{\n  stargazers: ITotalCount\n  primaryLanguage: ILanguage\n  issues: ITotalCount\n  pullRequests: ITotalCount\n};\n\nconst InformationPanel = ({stargazers, primaryLanguage, issues, pullRequests}: IInformationPanelProps) => {\n  const classes = useStyles();\n\n  return (\n    <div className='flex-center' >\n      <InformationBlock\n        className={classes.information}\n        icon={<StarBorderIcon  fontSize='inherit'/>}\n        title={stargazers?.totalCount}\n      />\n      <InformationBlock\n        className={classes.information}\n        icon={<CircleIcon fontSize='inherit' htmlColor={primaryLanguage?.color} />}\n        title={primaryLanguage?.name} \n      />\n      <InformationBlock\n        className={classes.information}\n        icon={<HelpOutlineIcon fontSize='inherit'/>}\n        title='Issues'\n        count={issues?.totalCount}\n      />\n      <InformationBlock\n        className={classes.information}\n        icon={<CallMergeIcon fontSize='inherit'/>}\n        title='Pull requests'\n        count={pullRequests?.totalCount}\n      />\n    </div>\n  )\n};\n\nexport default InformationPanel;\n","import React from 'react'\nimport { CardContent, Typography } from '@material-ui/core';\nimport { CardTitle } from '../CardTitle';\nimport { LanguagesBlock } from '../LanguagesBlock';\nimport { useStyles } from './styles';\nimport { InformationPanel } from '../InformationPanel';\nimport { IRepositoryCard } from '../../Interfaces/repository';\n\n\n\nconst RepositoryCard = (props: IRepositoryCard) => {\n  const classes = useStyles();\n\n  return (\n    <CardContent className={`${classes.root}  flex-wrap`}>\n      <div className={classes.mainInfo} >\n        <CardTitle to={`/repositories/${props.id}`}>{props.nameWithOwner}</CardTitle>\n        <InformationPanel\n          stargazers={props.stargazers}\n          primaryLanguage={props.primaryLanguage}\n          issues={props.issues}\n          pullRequests={props.pullRequests}\n        />\n        <Typography className={classes.descripition}  color=\"textPrimary\">{props.description}</Typography>\n      </div>\n        <LanguagesBlock languages={props.languages} className={classes.languageBlock} />\n    </CardContent>\n  )\n};\n\nexport default RepositoryCard;\n","import gql from \"graphql-tag\";\n\nexport const SEARCH_REPOSITORIES = gql`query SearchRepositoriesByName($repositoryName: String!,$cursor: String){ \n  search(query: $repositoryName, type: REPOSITORY, first: 10, after: $cursor){\n    repositoryCount\n    pageInfo{\n      endCursor\n      hasNextPage\n    }\n    edges{\n      node{\n        ... on Repository{\n          id\n          nameWithOwner\n          owner {\n            id\n            login\n          }\n          name\n          description\n          primaryLanguage{\n            color\n            name\n          }\n          stargazers{\n            totalCount\n          }\n        }\n      }\n    }\n  }\n}`\n\n\nexport const GET_REPOSITORY = gql`query GetRepositoryById($repositoryID: ID!) { \n  node(id: $repositoryID){\n    ... on Repository{\n\t\t\tid\n      name\n      nameWithOwner\n    \tdescription\n      primaryLanguage{\n        name\n        color\n      }\n      languages(first: 100){\n        totalSize\n        edges{\n          size\n          node {\n            id\n            name\n            color\n          }\n        }\n      }\n      stargazers{\n        totalCount\n      }\n      issues{\n        totalCount\n      }\n      pullRequests{\n        totalCount\n      }\n    }\n  }\n}`\n\n","import { IconButton } from '@material-ui/core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FullWidthCard } from '../Components/FullWidthCard';\nimport { RepositoryCard } from '../Components/RepositoryCard';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { useQuery } from '@apollo/client';\nimport { GET_REPOSITORY } from '../apolloRequests';\nimport { RouteComponentProps } from 'react-router'\n\ntype TParams = {\n  id: string\n}\n\nexport const RepositoriesPage = ({match}: RouteComponentProps<TParams>) => {\n  const { loading, error, data } = useQuery(GET_REPOSITORY, { variables: { repositoryID: match.params.id }})\n\n  return (\n    <div>\n      <Link to='/'><IconButton aria-label='Назад'><ArrowBackIcon/></IconButton></Link>\n      <FullWidthCard loading={loading} error={error} >\n        <RepositoryCard {...data?.node}/>\n      </FullWidthCard>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField, InputAdornment } from '@material-ui/core';\nimport SearchIcon from '@mui/icons-material/Search';\n\ninterface ISearchInputProps {\n  setValue: (value: string | null) => void\n}\n\nconst SearchInput = ({setValue}: ISearchInputProps) => {\n  const [state, setState] = useState('')\n\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value\n    value === '' ? setValue(null) : setValue(value)\n    setState(value)\n  }\n\n  return (\n    <TextField \n      fullWidth\n      type='text' \n      label='Поиск'\n      variant='outlined'\n      value={state}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position='end' >\n            <SearchIcon/>\n          </InputAdornment>\n        )\n      }}\n      onChange={changeHandler}\n    />  \n  );\n};\n\nexport default SearchInput;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\n\nexport const useStyles = makeStyles((theme: Theme) => \ncreateStyles({\n  information: {\n    marginRight: theme.spacing(2)\n  },\n  descripition: {\n    margin: '5px 0'\n  }\n})\n);\n","import React from 'react';\nimport { CardContent, Typography } from '@material-ui/core';\nimport { CardTitle } from '../CardTitle';\nimport { InformationBlock } from '../InformationBlock';\nimport CircleIcon from '@mui/icons-material/Circle';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport { useStyles } from './styles';\nimport { IRepositoryPreview } from '../../Interfaces/repository';\nimport { formatNumberByStringThousand } from '../../utils/formatting';\n\nconst SearchCard = (props: IRepositoryPreview) => {\n  const classes = useStyles();\n\n  return (\n    <CardContent>\n      <CardTitle to={`/repositories/${props.id}`}>{props.nameWithOwner}</CardTitle>\n      <Typography className={classes.descripition}  color=\"textPrimary\">{props.description}</Typography>\n\n      <div className='flex-center' >\n        <InformationBlock\n          className={classes.information}\n          icon={<StarBorderIcon  fontSize='inherit'/>}\n          title={formatNumberByStringThousand(props.stargazers?.totalCount)}\n      />\n      <InformationBlock\n          className={classes.information}\n          icon={<CircleIcon fontSize='inherit' htmlColor={props.primaryLanguage?.color} />}\n          title={props.primaryLanguage?.name}\n      />\n      </div>\n    </CardContent>\n  );\n};\n\nexport default SearchCard;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    listItem: {\n      paddingLeft: 0,\n      paddingRight: 0,\n    },\n    list: {\n      width: '100%',\n      marginBottom: 50\n    },\n  })\n);","import React from 'react';\nimport { ApolloError } from '@apollo/client'\nimport { List, ListItem } from '@material-ui/core'\nimport { FullWidthCard } from '../FullWidthCard'\nimport { SearchCard } from '../SearchCard'\nimport { INode, IRepositoryPreview } from '../../Interfaces/repository'\nimport { useStyles } from './styles'\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface ISearchListProps{\n  edges: INode<IRepositoryPreview>[]\n  loading: boolean\n  error: ApolloError | undefined\n}\n\nconst SearchList = ({edges, loading, error}: ISearchListProps) => {\n  const classes = useStyles();\n\n  return (\n  <List className={classes.list} >\n    { \n      edges.map(({node}: INode<IRepositoryPreview>) => (\n        <ListItem key={uuidv4()} className={classes.listItem} >\n        <FullWidthCard loading={loading} error={error}  >\n          <SearchCard {...node} />\n        </FullWidthCard>\n        </ListItem>\n      ))\n    }\n  </List>\n\n  )\n}\n\nexport default SearchList;\n","import { Skeleton } from '@mui/material'\nimport React from 'react'\n\ninterface IListSkeletonProps {\n  length?: number\n}\n\nconst ListSkeleton = ({length = 10}: IListSkeletonProps) => {\n  const array = new Array(length).fill(1)\n\n  return (\n    <>\n      {array.map(i => (\n        <Skeleton key={Math.random()} variant='rectangular' sx={{ bgcolor: 'grey.800', borderRadius: 4, height: 110, width: '100%', margin: '8px 0' }} />\n      ))}\n    </>\n  )\n}\n\nexport default ListSkeleton\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    input: {\n      width: '100%'\n    },\n    message: {\n      marginTop: '40px'\n    }\n  })\n);","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport { SearchInput } from '../Components/SearchInput';\nimport { SearchList } from '../Components/SearchList';\nimport ListSkeleton from '../Components/ListSkeleton/ListSkeleton';\nimport { useLazyQuery } from '@apollo/client';\nimport { useStyles } from './styles';\nimport { SEARCH_REPOSITORIES } from '../apolloRequests';\n\nexport const SearchPage = () => {\n  const classes = useStyles();\n  const [getRepositories, { loading, error, data, fetchMore }] = useLazyQuery(SEARCH_REPOSITORIES);\n\n  const changeHandler = (value: string | null) => {\n    getRepositories({ variables: { repositoryName: value}});\n  };\n  \n  const clickHandler = () => {\n    if(fetchMore === undefined) return null;\n    const { hasNextPage, endCursor } = data.search.pageInfo;\n    hasNextPage && fetchMore({\n      variables: {\n        cursor: endCursor,\n      }\n    });\n  };\n\n  return (\n    <div className='container' >\n      <SearchInput setValue={changeHandler} />\n      {loading && <ListSkeleton/> }\n      {\n        !data ? \n          !loading && <Typography className={classes.message} color='textPrimary' variant='body1'>Здесь пока ничего нет</Typography> \n        : <>\n          <SearchList edges={data?.search?.edges}  loading={loading} error={error} />\n          {data.search?.pageInfo.hasNextPage && <Button  variant='outlined' color='primary' onClick={clickHandler} >Загрузить больше</Button>}\n          </>\n      }\n    </div>\n  );\n};\n","import { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) => \n  createStyles({\n    main: {\n      backgroundColor: theme.palette.background.default,\n      minHeight: '100vh',\n      width: '100%',\n      paddingTop: 30,\n      paddingBottom: 100\n    },\n  })\n)","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport { useStyles } from './styles';\n\n\ninterface IMainContainerProps {\n  children: React.ReactNode\n};\n\n\nconst MainContainer = ({children}: IMainContainerProps) => {\n  const classes = useStyles();\n\n  return (\n    <main className={classes.main} >  \n      <Container maxWidth='md' >\n        <>\n        { children }\n        </>\n      </Container>\n    </main>\n    \n  );\n};\n\nexport default MainContainer;","import React from 'react';\nimport {  ThemeProvider } from '@material-ui/core/styles';\nimport { Switch, Route, HashRouter} from 'react-router-dom';\nimport {ApolloProvider} from \"@apollo/client\";\nimport { client } from './ApolloClient';\nimport { theme } from './theme';\nimport { RepositoriesPage } from './Pages/RepositoriesPage';\nimport { SearchPage } from './Pages/SearchPage';\nimport { MainContainer } from './Components/MainContainer';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <ThemeProvider theme={theme} >\n        <ApolloProvider client={client} >\n          <HashRouter>\n            <MainContainer>\n              <Switch>\n                <Route exact path='/' component={SearchPage} />\n                <Route path='/repositories/:id'  component={RepositoriesPage} />\n              </Switch>\n            </MainContainer>\n          </HashRouter>\n        </ApolloProvider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}